# PyChamberFlux default settings
# comply with YAML(TM) 1.1 standard <http://yaml.org/spec/1.1/>
# use PyYAML <http://pyyaml.org/> to parse into Python.
# WARNING: DO NOT MODIFY THIS FILE. MAKE A USER'S COPY AND MODIFY THAT.


# Caveats for the YAML formatting:
# - This config file allows only one nested level.
# - Boolean values are in lowercase: `true` and `false`
# - The `null` value is parsed into Python as `None`
# - Use double quotation marks for any regex expression
# - For scientific notation of floating numbers, always specify the sign of
#   the exponent, i.e., `1.0e+3` is correct while `1.0e3` is wrong.


# (c) Wu Sun <wu.sun@ucla.edu> 2016-2017


run_options:  # Running options
    baseline_correction: true
    # If true, a zero-flux baseline correction is applied.

    median_baseline: true
    # If true, use medians as the baseline.
    # If false, use means as the baseline.

    timelag_method: "nominal"
    # Timelag detection methods: "nominal", "manual" or "optimized".
    # For the "manual" method, a fixed timelag must be assigned.
    # For the "optimized" method, timelag will be optimized based on
    # a nonlinear fitting of the concentration changes.

    timelag_optimization_species: "co2"

    volume_correction: false
    # If true, optimize the effective volume (V_eff) to fit the curvature.

    curve_fitting_method: "all"
    # Curve fitting method: "nonlinear", "linear", "robust_linear", "all".

    process_today: false
    # If true, process only today's data. This will be useful for online 
    # daily processing. If false, process all available data.

    save_fitting_plots: false
    # If true, save the curve fitting plots for every chamber sampling period.

    save_daily_plots: false
    # If true, save daily plots of chamber fluxes and biomet variables.

    plot_style: "ggplot"
    # plot style for matplotlib; default is 'ggplot'
    # allowed parameters are:
    # 'bmh', 'classic', 'ggplot', 'fivethirtyeight', 'dark_background', 
    # 'presentation', seaborn series, etc.
    # see matplotlib guide on plotting style:
    # <http://matplotlib.org/users/style_sheets.html#style-sheets>


data_dir:  # Input and output directories, and other related settings
    biomet_data: "./biomet/*.csv"
    # Absolute or relative directory to search for biomet data files.

    conc_data: "./conc/*.csv"
    # Absolute or relative directory to search for concentration data files.
    
    flow_data: null
    # Absolute or relative directory to search for flow rate data files.

    output_dir: "./output/"
    # Output directory for the processed flux data.

    output_filename_str: ""
    # A prefix string to append before date stamp for output datafile names.

    plot_dir: "./plots/"
    # Directory for saved plots.

    separate_conc_data: true
    # If `true`, concentration measurements are stored on their own, not in
    # the biomet data files.
    # If `false`, search concentration measurements in the biomet data.

    separate_flow_data: false
    # If `false` (default), search flow rate variables in the biomet data.
    # If `true`, flow rate measurements are stored on their own, not in
    # the biomet data files (possibly relevant for some MFC instruments).


rules_for_standardized_names: |  # A huge comment block stating naming rules
    List of standardized variable names

    Time
    - 'time_sec': Time in seconds since 1 Jan 1904 00:00 (LabVIEW or old MacOS)
    - 'timestamp': Time in the format of 'yyyy-mm-dd hh:mm:ss'.
    - 'time_doy': Time in days since Jan 1 00:00 of that year, also called 
      (fractional) day of year. But is different from the integer day of year 
      (Julian day).
    - 'yr', 'mon', 'day', 'hr','min','sec': If no 'time_sec' or 'timestamp' is
      in the data, search for these variables.

    Chamber number: 'ch_no'.
      If there is no variable indicating the chamber number, it will be set by
      the `chamber_lookup_table_func` function in `general_func.py`. 

    Surface pressure: 'pres'. If not present, use the constant value in 
      `constants.site_pressure` or fall back to the standard pressure (1 atm).

    Gas concentrations
      Consistent with the gas species names defined in 
      `species_settings.species_list`. Gas species not in this list will not
      be processed. 

    Temperatures ('*' represents the chamber number or sensor number)
    - Atmospheric temperatures: `T_atm_*`. If there is only one atmospheric
      sensor, the variable name will be 'T_atm'. 
    - Chamber temperatures: `T_ch_*`.
    - Chamber dew temperature: `T_dew_ch_*`. Calculated from other variables,
      e.g., `T_ch` and water concentrations.
    - Leaf temperatures: `T_leaf_*`.
    - Soil temperatures: `T_soil_*`.
    - Datalogger panel temperature: `T_log`.
    - Infrared gas analyzer panel temperature: `T_inst`.

    Soil volumetric moisture: `w_soil_*`. 

    Flow rates: `flow_ch_*`.

    Atmospheric relative humidity: `RH_atm_*`. If there is only one atmospheric
      sensor, the variable name will be 'RH_atm'. 

    Radiation
    - Photosynthetically available radiation (PAR)
      If the PAR sensors are associated with chambers, the variable names will
      follow `PAR_ch_*`.
      If the PAR sensors are not associated with chambers, the variable names
      will follow `PAR_*`.
    - Other radiation variables are not considered here. But users may set
      `biomet_data_settings.columns_to_save` to output them.


biomet_data_settings:  # Settings for reading the biomet data
    delimiter: ","
    # Supported table delimiters:
    #   - singe space: " "
    #   - indefinite number of spaces: "\\s+" (works also for single space)
    #   - comma: ","
    #   - tab: "\\t"
    
    header: "infer"
    # Number of rows to skip at the beginning of the file.
    # Default behavior is to infer it with `pandas.read_csv()`.

    names: null
    # Define the data table column names. 
    # Default is `null`, i.e., to infer with `pandas.read_csv()`.
    # Tip: copy the column names from the data file, and then change name of
    # the variables of interest to the standardized names.

    usecols: null
    # Specify a sequence of indices for columns to read into the data
    # structure. Column index starts from 0 in Python.
    # Default behavior (`null`) is to read all columns.

    dtype: null
    # If `null`, falls back to the default setting of `pandas.read_csv()`.
    # Its default settings handle data types pretty well without specification.
    # You can also modify the line above to customize column data types.
    # For example, dtype: "f8, f8, f8, i8" indicates that the first 3 columns 
    # are (double) floating numbers and the last column is of integer type.

    missing_values: null
    # deprecated, see `na_values`.

    na_values: null
    # Modify this if you need specify the missing values.
    # Default is `null` that uses the default options of `pandas.read_csv()`.

    columns_to_save: null
    # If `null`, save all columns of the 'standardized variables' parsed from 
    # the biomet data table

    timestamp_format: null
    # If `null`, use the default timestamp format '%Y-%m-%d:%X' corresponding
    # to 'yyyy-mm-dd hh:mm:ss'. Modify this if you have a different timestamp 
    # format. See Python 3 `datetime` format reference: 
    # <https://docs.python.org/3/library/datetime.html>

    time_sec_start: null
    # If null, the starting year of the time_sec format is 1904 (LabVIEW).
    # This option only takes the year number in four digits (integer).
    # For example, an instrument working on Unix system may give time in 
    # seconds since 1 Jan 1970 00:00, then this option should be set to 1970.
    # Check your instrument manual for its specific time format, if it records
    # time in seconds since a date.

    time_in_UTC: true
    # Default is `true` to treat the time variable in UTC time.

    flow_rate_in_STP: true
    # By default set to `true`. The flow rate is referenced to STP condition,
    # as for many commonly available flow sensors. This means that the
    # flow rates need to be corrected for ambient temperature and pressure.
    # If set to false, no such correction on flow rates is applied.


conc_data_settings:  # Settings for reading the concentration data
    delimiter: ","
    # Supported table delimiters:
    #   - singe space: " "
    #   - indefinite number of spaces: "\\s+" (works also for single space)
    #   - comma: ","
    #   - tab: "\\t"

    header: "infer"
    # Number of rows to skip at the beginning of the file.
    # Default behavior is to infer it with `pandas.read_csv()`.

    names: null
    # Define the data table column names. 
    # Default is `null`, i.e., to infer with `pandas.read_csv()`.
    # Note that for concentration data table, gas species that are not
    # defined in the species settings will be ignored.

    usecols: null
    # Specify a sequence of indices for columns to read into the data
    # structure. Column index starts from 0 in Python.
    # Default behavior (`null`) is to read all columns.

    dtype: null
    # If `null`, falls back to the default setting of `pandas.read_csv()`.
    # Its default settings handle data types pretty well without specification.
    # You can also modify the line above to customize column data types.
    # For example, dtype: "f8, f8, f8, i8" indicates that the first 3 columns 
    # are (double) floating numbers and the last column is of integer type.

    missing_values: null
    # deprecated, see `na_values`.

    na_values: null
    # Modify this if you need specify the missing values.

    columns_to_save: null
    # If `null`, save all columns of the 'standardized variables' parsed from 
    # the concentration data table

    timestamp_format: null
    # If `null`, use the default timestamp format '%Y-%m-%d:%X' corresponding
    # to 'yyyy-mm-dd hh:mm:ss'. Modify this if you have a different timestamp 
    # format. See Python 3 `datetime` format reference: 
    # <https://docs.python.org/3/library/datetime.html>

    time_sec_start: null
    # If null, the starting year of the time_sec format is 1904 (LabVIEW).
    # This option only takes the year number in four digits (integer).
    # For example, an instrument working on Unix system may give time in 
    # seconds since 1 Jan 1970 00:00, then this option should be set to 1970.
    # Check your instrument manual for its specific time format, if it records
    # time in seconds since a date.

    time_in_UTC: true
    # Default is `true` to treat the time variable in UTC time.


flow_data_settings:  # Settings for reading the flow rate data
    delimiter: ","
    # Supported table delimiters:
    #   - singe space: " "
    #   - indefinite number of spaces: "\\s+" (works also for single space)
    #   - comma: ","
    #   - tab: "\\t"

    header: "infer"
    # Number of rows to skip at the beginning of the file.
    # Default behavior is to infer it with `pandas.read_csv()`.

    names: null
    # Define the data table column names. 
    # Default is `null`, i.e., to infer with `pandas.read_csv()`.
    # Tip: copy the column names from the data file, and then change name of
    # the variables of interest to the standardized names.

    usecols: null
    # Specify a sequence of indices for columns to read into the data
    # structure. Column index starts from 0 in Python.
    # Default behavior (`null`) is to read all columns.

    dtype: null
    # If `null`, falls back to the default setting of `pandas.read_csv()`.
    # Its default settings handle data types pretty well without specification.
    # You can also modify the line above to customize column data types.
    # For example, dtype: "f8, f8, f8, i8" indicates that the first 3 columns 
    # are (double) floating numbers and the last column is of integer type.

    missing_values: null
    # deprecated, see `na_values`.

    na_values: null
    # Modify this if you need specify the missing values.

    columns_to_save: null
    # If `null`, save all columns of the 'standardized variables' parsed from 
    # the flow data table

    timestamp_format: null
    # If `null`, use the default timestamp format '%Y-%m-%d:%X' corresponding
    # to 'yyyy-mm-dd hh:mm:ss'. Modify this if you have a different timestamp 
    # format. See Python 3 `datetime` format reference: 
    # <https://docs.python.org/3/library/datetime.html>

    time_sec_start: null
    # If null, the starting year of the time_sec format is 1904 (LabVIEW).
    # This option only takes the year number in four digits (integer).
    # For example, an instrument working on Unix system may give time in 
    # seconds since 1 Jan 1970 00:00, then this option should be set to 1970.
    # Check your instrument manual for its specific time format, if it records
    # time in seconds since a date.

    time_in_UTC: true
    # Default is `true` to treat the time variable in UTC time.


site_parameters:
# Site-specific parameters
    site_pressure: null
    # In Pascal. Default behavior (`null`) is to use the standard pressure.

    time_zone: 0
    # Timezone with respect to UTC. For example, -8 means UTC-8.
    # Warning: does not support daylight saving transition. Use standard
    # non daylight saving time, or process separately the data before 
    # and after daylight saving.


species_settings:
    species_list: ['co2', 'h2o']
    # Measured gas species in the concentration data. Note: the order of gas
    # species in the output file will follow the order defined in this sequence

    species_names: ['CO$_2$', 'H$_2$O']
    # names of gas species shown in the plot axis labels.
    # LaTeX format is supported by matplotlib.

    # `unit`: the unit of mixing ratio in the concentration data file
    # `output_unit`: the unit of mixing ratio in the output file
    # `multiplier`: the number to multiply to the input values for conversion 
    # to the output unit, must equal to `unit / output_unit`.
    # For example, if H2O in the input data file was recorded in percentage 
    # (1.0e-2), and the output unit of H2O concentration needs to be parts per
    # thousand (1.0e-3), then the multiplier would be 10.
    # Some commonly used units:
    #     1.0 = mole fraction [0 to 1]
    #     1.0e-2 = percent (%)
    #     1.0e-3 = ppthv (parts per thousand) or mmol mol^-1
    #     1.0e-6 = ppmv or mumol mol^-1
    #     1.0e-9 = ppbv or nmol mol^-1
    #     1.0e-12 = pptv (parts per trillion) or pmol mol^-1

    h2o:
        unit: 1.0e-9
        output_unit: 1.0e-3
        multiplier: 1.0e-6
    
    co2:
        unit: 1.0e-9
        output_unit: 1.0e-6
        multiplier: 1.0e-3

    cos:
        unit: 1.0e-9
        output_unit: 1.0e-12
        multiplier: 1.0e+3

    co:
        unit: 1.0e-9
        output_unit: 1.0e-9
        multiplier: 1.0

    ch4:
        unit: 1.0e-9
        output_unit: 1.0e-9
        multiplier: 1.0

    # You may add your own gas species following the same format
    # The name that represents the added gas species is not so important 
    # as long as it is used **consistently**. For example, if you define the 
    # species name for CO2 to be `CO_2`, you must use the same name `CO_2` in 
    # the `species_list` key and the following unit definition.
